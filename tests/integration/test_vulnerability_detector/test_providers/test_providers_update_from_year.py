'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os

import pytest
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_providers_update_from_year.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

test_providers = ['redhat', 'nvd']
test_years = [1998, 2001, 2002, 2005, 2010, 2015, 2020]

min_year = {
    'nvd': 2002,
    'redhat': 1999
}

parameters = []
metadata = []
ids = []

for provider in test_providers:
    for year in test_years:
        parameters.append({'PROVIDER': provider, 'UPDATE_FROM_YEAR': year})
        metadata.append({'provider': provider, 'update_from_year': year})
        ids.append(f'{provider}_{year}')

INVALID_YEAR_MESSAGE = "ERROR: Invalid content for 'update_from_year' option at module 'vulnerability-detector'"
MODULESD_PREFIX = r'.*wazuh-modulesd.*'

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_update_from_year(clean_vuln_tables, get_configuration, configure_environment,
                          restart_modulesd_catching_ossec_conf_error):
    '''
    description: Check if vulnerability detector download feeds from the correct year based on `update_from_year`
                 option. To do this, it checks for a valid year of the providers and downloads the feed.

    wazuh_min_version: 4.2.0

    parameters:
        - clean_vuln_tables:
            type: fixture
            brief: Clean the tables involved with vulnerability detector packages and feeds.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd_catching_ossec_conf_error:
            type: fixture
            brief: Restart the `modulesd` daemon and catch the ossec configuration errors.

    assertions:
        - Verify that the vulnerability detector behavior when it is set the `x` year for `y` provider, taking into an
          account that there is a minimum year for each provider.
        - Verify that there is no download from one year before the update from year value
        - Verify that their respective log will be found and none from a previous year in `ossec.log`.

    input_description:
        - Test cases are found in the test module and include parameters for the `update_from_year` tag of the provider
          option. The `wazuh_providers_update_from_year.yaml` file provides the configuration of this module for this
          test.

    expected_output:
        - r'.*Downloading .*cve.json after=1999-01-01.*'
        - r'.*Downloading .*cve.json after=.*-01-01.*'
        - r'.*Downloading .*nvdcve-.*.meta.*'
        - r'ERROR: Invalid content for `update_from_year` option at module `vulnerability-detector`'
    '''
    update_year = get_configuration['metadata']['update_from_year']
    provider = get_configuration['metadata']['provider']

    # If valid year
    if update_year >= min_year[provider]:
        if provider == 'redhat':
            correct_year_log_event = fr".*Downloading .*cve.json\?after=1999-01-01.*"
            wrong_year_log_event = fr".*Downloading .*cve.json\?after={update_year}-01-01.*"
        else:  # NVD provider
            correct_year_log_event = fr".*Downloading .*nvdcve-\d.\d-{update_year}.meta.*"
            wrong_year_log_event = fr".*Downloading .*nvdcve-\d.\d-{update_year - 1}.meta.*"

        # Check that there is no download from one year before of the update from year value
        with pytest.raises(TimeoutError):
            vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=wrong_year_log_event,
                               update_position=False, timeout=90, prefix=MODULESD_PREFIX)
            raise AttributeError(f'It has been downloaded a feed from an invalid year {update_year} for {provider}')

        # Check update from year log event
        vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=correct_year_log_event, update_position=False,
                           timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT, prefix=MODULESD_PREFIX)
    else:
        log_event = "ERROR: Invalid content for 'update_from_year' option at module 'vulnerability-detector'"
        vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=log_event, update_position=False,
                           timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT, prefix=MODULESD_PREFIX)

    vd.clean_vd_tables()
