'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os

import pytest
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_enabled.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'ENABLED': 'yes', 'PROVIDER': 'alas', 'OS': 'amazon-linux'},
    {'ENABLED': 'yes', 'PROVIDER': 'alas', 'OS': 'amazon-linux-2'},
    {'ENABLED': 'yes', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'yes', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'yes', 'PROVIDER': 'redhat', 'OS': '7'},
    {'ENABLED': 'yes', 'PROVIDER': 'nvd', 'OS': ''},
    {'ENABLED': 'yes', 'PROVIDER': 'msu', 'OS': ''},
    {'ENABLED': 'yes', 'PROVIDER': 'arch', 'OS': ''},
    {'ENABLED': 'no', 'PROVIDER': 'alas', 'OS': 'amazon-linux'},
    {'ENABLED': 'no', 'PROVIDER': 'alas', 'OS': 'amazon-linux-2'},
    {'ENABLED': 'no', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'no', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'no', 'PROVIDER': 'redhat', 'OS': '7'},
    {'ENABLED': 'no', 'PROVIDER': 'nvd', 'OS': ''},
    {'ENABLED': 'no', 'PROVIDER': 'msu', 'OS': ''},
    {'ENABLED': 'no', 'PROVIDER': 'arch', 'OS': ''},
]

metadata = [
    {'enabled': 'yes', 'provider_name': 'Amazon Linux 1'},
    {'enabled': 'yes', 'provider_name': 'Amazon Linux 2'},
    {'enabled': 'yes', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'yes', 'provider_name': 'Debian Buster'},
    {'enabled': 'yes', 'provider_name': 'Red Hat Enterprise Linux 7'},
    {'enabled': 'yes', 'provider_name': 'National Vulnerability Database'},
    {'enabled': 'yes', 'provider_name': 'Microsoft Security Update'},
    {'enabled': 'yes', 'provider_name': 'Arch Linux'},
    {'enabled': 'no', 'provider_name': 'Amazon Linux 1'},
    {'enabled': 'no', 'provider_name': 'Amazon Linux 2'},
    {'enabled': 'no', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'no', 'provider_name': 'Debian Buster'},
    {'enabled': 'no', 'provider_name': 'Red Hat Enterprise Linux 7'},
    {'enabled': 'no', 'provider_name': 'National Vulnerability Database'},
    {'enabled': 'no', 'provider_name': 'Microsoft Security Update'},
    {'enabled': 'no', 'provider_name': 'Arch Linux'}
]

ids = [f"{item['ENABLED']}-{item['PROVIDER']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_enabled(get_configuration, configure_environment, restart_modulesd):
    '''
    description: Check if modulesd downloads the feeds from different providers when enabled is set to yes. To do this,
                 it identifies the log which, if activated, indicates the update of the feeds. If the feeds are not
                 active in the configuration, check that the above-mentioned log does not occur.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.

    assertions:
        - Verify that when the `enabled` tag of the provider option is set to `yes`, provider database starts updating.
        - Verify that when the `enabled` tag of the provider option is set to `no`, checks that provider database does
          not start updating.

    input_description:
        - Test cases are found in the test module and include parameters for the `enabled` tag of the provider option
          (`yes` and `no`). The `wazuh_providers_enabled.yaml` file provides the configuration of this module for this
          test.

    expected_output:
        - 'Starting.+database update'
        - r'Unexpected event .* database updating'
        - r'Starting .* database update'
        - r'Could not find .* update starting log'
    '''
    provider_name = get_configuration['metadata']['provider_name']
    if get_configuration['metadata']['enabled'] == 'no':
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
                                    callback=make_vuln_callback("Starting.+database update"))
            raise AttributeError(f"Unexpected event {provider_name} database updating")
    else:
        wazuh_log_monitor.start(
            timeout=VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
            callback=make_vuln_callback(f"Starting '{provider_name}' database update"),
            error_message=f"Could not find {provider_name} update starting log",
        )
