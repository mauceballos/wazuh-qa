'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
from datetime import timedelta

import pytest
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.vulnerability_detector import make_vuln_callback

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_providers_update_interval.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

time_units = ['60s', '60m', '1h', '1d']
parameters = []
metadata = []
ids = []

for item in time_units:
    parameters.extend([
        {'PROVIDER_NAME': 'alas', 'OS': 'amazon-linux', 'INTERVAL': item},
        {'PROVIDER_NAME': 'redhat', 'OS': '8', 'INTERVAL': item},
        {'PROVIDER_NAME': 'canonical', 'OS': 'bionic', 'INTERVAL': item},
        {'PROVIDER_NAME': 'debian', 'OS': 'buster', 'INTERVAL': item},
        {'PROVIDER_NAME': 'nvd', 'OS': '', 'INTERVAL': item},
        {'PROVIDER_NAME': 'msu', 'OS': '', 'INTERVAL': item},
        {'PROVIDER_NAME': 'arch', 'OS': '', 'INTERVAL': item}
    ])

    metadata.extend([
        {'provider_name': 'alas', 'os': 'amazon-linux', 'interval': item},
        {'provider_name': 'redhat', 'os': '8', 'interval': item},
        {'provider_name': 'canonical', 'os': 'bionic', 'interval': item},
        {'provider_name': 'debian', 'os': 'buster', 'interval': item},
        {'provider_name': 'nvd', 'os': '', 'interval': item},
        {'provider_name': 'msu', 'os': '', 'interval': item},
        {'provider_name': 'arch', 'os': '', 'interval': item}
    ])

    ids.extend([f"Amazon_{item}", "Redhat_{item}", f"Canonical_{item}", f"Debian_{item}", f"NVD_{item}", f"MSU_{item}",
                f"Arch_{item}"])

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

# Callbacks
callback_provider_database_updating = make_vuln_callback('Starting .* database update')


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.skip(reason='Temporarily disabled until refactor in https://github.com/wazuh/wazuh-qa/issues/2453')
def test_update_interval(get_configuration, configure_environment, restart_modulesd):
    '''
    description: Check if the provider database update is triggered after the set interval time has passed. To do this,
                 it checks that the feed update is not started prematurely by checking the log file. It then travels
                 forward in time, specifically to five seconds after the expiration of the time set in the
                 update_interval option. Finally, it checks through the log file that the update of the feeds is started
                 after this period.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.

    assertions:
        - Verify that the update has not started prematurely.
        - Verify that the feed is downloaded after the set update interval.

    input_description:
        - Test cases are found in the test module and include parameters for the `update_interval` tag of the provider
          option. The `wazuh_providers_update_interval.yaml` file provides the configuration of this module for this
          test.

    expected_output:
        - r'Unexpected event .* database updating'
        - r'Could not find the provider .* updating feed log after the interval update'
        - 'Starting .* database update'
    '''
    check_apply_test({'test_providers_update_interval'}, get_configuration['tags'])

    provider = get_configuration['metadata']['provider_name']
    interval_update_time = get_configuration['metadata']['interval']
    seconds_to_travel = time_to_seconds(interval_update_time) + 5

    # Check that the update has not started prematurely
    with pytest.raises(TimeoutError):
        wazuh_log_monitor.start(timeout=8,
                                callback=callback_provider_database_updating)
        raise AttributeError(f'Unexpected event {provider} database updating')

    # Travels the time set in the update interval parameter
    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    # Check that the feed is downloaded after the set update interval
    # (10s for vuln thread refresh + 5s to wait callback)
    wazuh_log_monitor.start(timeout=50,
                            callback=callback_provider_database_updating,
                            error_message=f"Could not find the provider {provider} updating feed log after \
                                            the interval update")
