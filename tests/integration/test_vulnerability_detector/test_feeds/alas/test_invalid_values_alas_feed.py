# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import itertools
import os
from tempfile import gettempdir

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import lower_case_key_dictionary_array

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=2)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ALAS_FEEDS_CONF)
custom_alas_feed_folder = os.path.join(gettempdir())
custom_alas_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS_JSON_FEED)
custom_alas2_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS2_JSON_FEED)

alas_feed_files = {'amazon-linux': custom_alas_json_feed_path,
                   'amazon-linux-2': custom_alas2_json_feed_path}

parameters = [
    {'ALAS_CUSTOM_FEED': os.path.join(custom_alas_feed_folder, vd.CUSTOM_ALAS_JSON_FEED), 'OS': 'amazon-linux'},
    {'ALAS_CUSTOM_FEED': os.path.join(custom_alas_feed_folder, vd.CUSTOM_ALAS2_JSON_FEED), 'OS': 'amazon-linux-2'}
]
metadata = lower_case_key_dictionary_array(parameters)
ids = [
    'ALAS_configuration',
    'ALAS2_configuration'
]

# Amazon Linux fields to check
test_data = [
    {'field': 'severity', 'type': []},
    {'field': 'publishedDate', 'type': []},
    {'field': 'lastModifiedDate', 'type': []},
    {'field': 'references', 'type': []},
    {'field': 'vulnerabilities', 'type': [list]},
    {'field': 'fixed_packages', 'type': []}
]

test_data_ids = [f"field: {item['field']}, value:{value}" for item in test_data for value in
                 vd.CUSTOM_INPUT_TEST_VALUES]
# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
daemons_handler_configuration = {'daemons': ['wazuh-db', 'wazuh-analysisd', 'wazuh-modulesd'], 'ignore_errors': False}


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def copy_files(get_configuration):
    custom_feed_path = alas_feed_files[get_configuration['metadata']['os']]

    feed_string = read_json_file(custom_feed_path)

    custom_alas_feed_path = get_configuration['metadata']['alas_custom_feed']

    write_json_file(custom_alas_feed_path, feed_string)

    yield

    os.remove(custom_alas_feed_path)


@pytest.fixture(scope='module')
def set_system():
    vd.set_system(system='ALAS')


@pytest.fixture
def modify_feed(test_data, custom_input, get_configuration, request):
    """Modify the Amazon Linux feed by setting a test field value."""
    alas_feed_path = get_configuration['metadata']['alas_custom_feed']

    data = read_json_file(alas_feed_path)

    if alas_feed_files[get_configuration['metadata']['os']] == custom_alas_json_feed_path:
        modified_data = dict(data['advisories']['ALAS-2021-1498'])
        modified_data[test_data['field']] = custom_input

        data['advisories']['ALAS-2021-1498'] = modified_data
    if alas_feed_files[get_configuration['metadata']['os']] == custom_alas2_json_feed_path:
        modified_data = dict(data['advisories']['ALAS-2021-1633'])
        modified_data[test_data['field']] = custom_input

        data['advisories']['ALAS-2021-1633'] = modified_data

    write_json_file(alas_feed_path, data)

    yield

    vd.clean_vuln_and_sys_programs_tables()


def test_no_feed_changes(copy_files, clean_vuln_tables, after_execution_clean_vuln_tables_function,  get_configuration, configure_environment, daemons_handler,
                         file_monitoring):
    """Check if the feed is imported successfully by default"""
    if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
    elif get_configuration['metadata']['alas_custom_feed'] == custom_alas2_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_data, custom_input', itertools.product(test_data, vd.CUSTOM_INPUT_TEST_VALUES),
                         ids=test_data_ids)
def test_invalid_values_alas_feed(copy_files, modify_feed, daemons_handler, test_data, custom_input, set_system, get_configuration, configure_environment,
                                  restart_modulesd_function, file_monitoring):
    """Check if Vulnerability Detector behaves as expected while importing Amazon Linux feed with syntax errors."""

    alas_custom_feed_file = get_configuration['metadata']['alas_custom_feed'].split('/')[2]

    if vd.CUSTOM_ALAS_JSON_FEED == alas_custom_feed_file:
        expected_alas_vulnerabilities = vd.ALAS_NUM_CUSTOM_VULNERABILITIES
        if test_data['field'] == 'vulnerabilities':
            expected_alas_vulnerabilities = 24
            if isinstance(custom_input, list):
                expected_alas_vulnerabilities = expected_alas_vulnerabilities + 5 * (len(custom_input) + 1)
        elif test_data['field'] == 'fixed_packages':
            expected_alas_vulnerabilities = 24
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=expected_alas_vulnerabilities)
    elif vd.CUSTOM_ALAS2_JSON_FEED == alas_custom_feed_file:
        expected_alas2_vulnerabilities = vd.ALAS2_NUM_CUSTOM_VULNERABILITIES
        if test_data['field'] == 'vulnerabilities':
            expected_alas2_vulnerabilities = 8
            if isinstance(custom_input, list):
                expected_alas2_vulnerabilities = expected_alas2_vulnerabilities + 5 * (len(custom_input) * 2)
        elif test_data['field'] == 'fixed_packages':
            expected_alas2_vulnerabilities = 8
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=expected_alas2_vulnerabilities)

    vd.check_if_modulesd_is_running()
