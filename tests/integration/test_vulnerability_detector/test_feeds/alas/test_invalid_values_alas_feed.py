'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Amazon Linux
       Database.

tier: 2

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/
    - https://documentation.wazuh.com/current/user-manual/capabilities/syscollector.html

tags:
    - vulnerability
    - vulnerability_detector
    - feeds
    - alas_feeds
'''
import itertools
import os
from tempfile import gettempdir

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import lower_case_key_dictionary_array

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=2)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ALAS_FEEDS_CONF)
custom_alas_feed_folder = os.path.join(gettempdir())
custom_alas_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS_JSON_FEED)
custom_alas2_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS2_JSON_FEED)

alas_feed_files = {'amazon-linux': custom_alas_json_feed_path,
                   'amazon-linux-2': custom_alas2_json_feed_path}

parameters = [
    {'ALAS_CUSTOM_FEED': os.path.join(custom_alas_feed_folder, vd.CUSTOM_ALAS_JSON_FEED), 'OS': 'amazon-linux'},
    {'ALAS_CUSTOM_FEED': os.path.join(custom_alas_feed_folder, vd.CUSTOM_ALAS2_JSON_FEED), 'OS': 'amazon-linux-2'}
]
metadata = lower_case_key_dictionary_array(parameters)
ids = [
    'ALAS_configuration',
    'ALAS2_configuration'
]

# Amazon Linux fields to check
test_data = [
    {'field': 'severity', 'type': []},
    {'field': 'publishedDate', 'type': []},
    {'field': 'lastModifiedDate', 'type': []},
    {'field': 'references', 'type': []},
    {'field': 'vulnerabilities', 'type': [list]},
    {'field': 'fixed_packages', 'type': []}
]

test_data_ids = [f"field: {item['field']}, value:{value}" for item in test_data for value in
                 vd.CUSTOM_INPUT_TEST_VALUES]
# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
daemons_handler_configuration = {'daemons': ['wazuh-db', 'wazuh-analysisd', 'wazuh-modulesd'], 'ignore_errors': False}


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def copy_files(get_configuration):
    custom_feed_path = alas_feed_files[get_configuration['metadata']['os']]

    feed_string = read_json_file(custom_feed_path)

    custom_alas_feed_path = get_configuration['metadata']['alas_custom_feed']

    write_json_file(custom_alas_feed_path, feed_string)

    yield

    os.remove(custom_alas_feed_path)


@pytest.fixture(scope='module')
def set_system():
    """Set custom system in global DB Agent info."""
    vd.set_system(system='ALAS')


@pytest.fixture
def modify_feed(test_data, custom_input, get_configuration, request):
    """Modify the Amazon Linux feed by setting a test field value."""
    alas_feed_path = get_configuration['metadata']['alas_custom_feed']

    data = read_json_file(alas_feed_path)

    if alas_feed_files[get_configuration['metadata']['os']] == custom_alas_json_feed_path:
        modified_data = dict(data['advisories']['ALAS-2021-1498'])
        modified_data[test_data['field']] = custom_input

        data['advisories']['ALAS-2021-1498'] = modified_data
    if alas_feed_files[get_configuration['metadata']['os']] == custom_alas2_json_feed_path:
        modified_data = dict(data['advisories']['ALAS-2021-1633'])
        modified_data[test_data['field']] = custom_input

        data['advisories']['ALAS-2021-1633'] = modified_data

    write_json_file(alas_feed_path, data)

    yield

    vd.clean_vuln_and_sys_programs_tables()


def test_no_feed_changes(copy_files, clean_vuln_tables, after_execution_clean_vuln_tables_function,  get_configuration,
                         configure_environment, daemons_handler, file_monitoring):
    '''
    description: Check if the feed is imported successfully by default. To do this, a vulnerability event is expected
                 and check if the number of vulnerabilities inserted in the VULNERABILITIES table of CVE DB is the
                 expected.

    wazuh_min_version: 4.3.0

    parameters:
        - copy_files:
            type: fixture
            brief: Write dict data to JSON file.
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - after_execution_clean_vuln_tables_function:
            type: fixture
            brief: Clean vulnerabilities tables after execution.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - daemons_handler:
            type: fixture
            brief: Handler of Wazuh daemons.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.

    assertions:
        - Verify that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB.

    input_description:
        - Test cases are defined in the custom_alas_feed.json and custom_alas2_feed.json files. Those files contain two
          different kinds of vulnerabilities. This test gets their configuration of the wazuh_invalid_alas_feed.yaml
          file.

    expected_output:
        - 'Number of inserted vulnerabilities is not the expected.'
        - r'Expected, .*, Got: .*'

    tags:
        - vulnerability
        - vulnerability_detector
        - system_inventory
    '''
    if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
    elif get_configuration['metadata']['alas_custom_feed'] == custom_alas2_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_data, custom_input', itertools.product(test_data, vd.CUSTOM_INPUT_TEST_VALUES),
                         ids=test_data_ids)
def test_invalid_values_alas_feed(copy_files, modify_feed, daemons_handler, test_data, custom_input, set_system,
                                  get_configuration, configure_environment, restart_modulesd_function, file_monitoring):
    '''
    description: Check if Vulnerability Detector behaves as expected when importing the Amazon Linux feed with an
                 invalid tag value. To do this, it fetches in the test_data list the type of information to be analyzed
                 and modify the feed assigning strange labels and check if the feed can be imported.

    wazuh_min_version: 4.3.0

    parameters:
        - copy_files:
            type: fixture
            brief: Write dict data to JSON file.
        - modify_feed:
            type: fixture
            brief: Modify the Amazon Linux JSON feed by setting a test tag value.
        - daemons_handler:
            type: fixture
            brief: Handler of Wazuh daemons.
        - test_data:
            type: dict's list
            brief: List of tests to be performed.
        - custom_input:
            type: list
            brief: Input list of dict of ids.
        - set_system:
            type: fixture
            brief: Set custom system in global DB Agent info.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd_function:
            type: fixture
            brief: Perform the restart operation with Wazuh.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.

    assertions:
        - Verify that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB and if the process is running.

    input_description:
        - Test cases are defined in the custom_alas_feed.json and custom_alas2_feed.json files. Those files contain two
          different kinds of vulnerabilities. Also, there is a test_data that contains tags to be checked and a
          custom_input list that contains strange labels. Based on the number of expected vulnerabilities,
          feeds are imported successfully. This test gets their configuration of the wazuh_invalid_alas_feed.yaml file.

    expected_output:
        - r'INFO: .* The update of the .* feed finished successfully.'

    tags:
        - vulnerability
        - vulnerability_detector
        - system_inventory
    '''
    alas_custom_feed_file = get_configuration['metadata']['alas_custom_feed'].split('/')[2]

    if vd.CUSTOM_ALAS_JSON_FEED == alas_custom_feed_file:
        expected_alas_vulnerabilities = vd.ALAS_NUM_CUSTOM_VULNERABILITIES
        if test_data['field'] == 'vulnerabilities':
            expected_alas_vulnerabilities = 24
            if isinstance(custom_input, list):
                expected_alas_vulnerabilities = expected_alas_vulnerabilities + 5 * (len(custom_input) + 1)
        elif test_data['field'] == 'fixed_packages':
            expected_alas_vulnerabilities = 24
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=expected_alas_vulnerabilities)
    elif vd.CUSTOM_ALAS2_JSON_FEED == alas_custom_feed_file:
        expected_alas2_vulnerabilities = vd.ALAS2_NUM_CUSTOM_VULNERABILITIES
        if test_data['field'] == 'vulnerabilities':
            expected_alas2_vulnerabilities = 8
            if isinstance(custom_input, list):
                expected_alas2_vulnerabilities = expected_alas2_vulnerabilities + 5 * (len(custom_input) * 2)
        elif test_data['field'] == 'fixed_packages':
            expected_alas2_vulnerabilities = 8
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=expected_alas2_vulnerabilities)

    vd.check_if_modulesd_is_running()
