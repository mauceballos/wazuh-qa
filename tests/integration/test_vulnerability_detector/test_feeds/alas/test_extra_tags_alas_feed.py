# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
from copy import deepcopy
from tempfile import gettempdir

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file, write_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import lower_case_key_dictionary_array

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=2)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ALAS_FEEDS_CONF)
custom_alas_feed_path = os.path.join(gettempdir(), 'custom_alas_feed.json')
custom_alas_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS_JSON_FEED)
custom_alas2_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS2_JSON_FEED)

alas_feed_files = {'amazon-linux': custom_alas_json_feed_path,
                   'amazon-linux-2': custom_alas2_json_feed_path}

parameters = [
    {'ALAS_CUSTOM_FEED': custom_alas_feed_path, 'OS': 'amazon-linux'},
    {'ALAS_CUSTOM_FEED': custom_alas_feed_path, 'OS': 'amazon-linux-2'}
]
metadata = lower_case_key_dictionary_array(parameters)
ids = [
    'ALAS_configuration',
    'ALAS2_configuration'
]


# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
daemons_handler_configuration = {'daemons': ['wazuh-db', 'wazuh-analysisd', 'wazuh-modulesd'], 'ignore_errors': False}


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def copy_files(get_configuration):
    custom_feed_path = alas_feed_files[get_configuration['metadata']['os']]

    feed_string = read_json_file(custom_feed_path)

    write_json_file(custom_alas_feed_path, feed_string)

    yield

    os.remove(custom_alas_feed_path)


@pytest.fixture(scope='module')
def set_system():
    vd.set_system(system='ALAS')


@pytest.fixture
def modify_feed(test_values, get_configuration, request):
    """Modify the Amazon Linux JSON feed by setting a test tag value."""
    alas_feed_path = get_configuration['metadata']['alas_custom_feed']

    backup_data = read_json_file(alas_feed_path)
    modified_data = deepcopy(backup_data)

    # Insert key:value pair as string, since otherwise, you could not insert lists or dictionaries as a key
    modified_string_data = vd.insert_data_json_feed(data=modified_data, field_name=test_values[0],
                                                    field_value=test_values[1], append_data=None, brackets=False)

    write_file(alas_feed_path, modified_string_data)

    yield

    vd.clean_vuln_and_sys_programs_tables()


def test_no_feed_changes(copy_files, clean_vuln_tables, after_execution_clean_vuln_tables_function,  get_configuration, configure_environment, daemons_handler,
                         file_monitoring):
    """Check if the feed is imported successfully by default."""
    if alas_feed_files[get_configuration['metadata']['os']] == custom_alas_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
    elif alas_feed_files[get_configuration['metadata']['os']] == custom_alas2_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_values', vd.EXTRA_TEST_VALUES, ids=vd.EXTRA_TEST_IDS)
def test_extra_tags_alas_linux_feed(copy_files, modify_feed, daemons_handler, test_values, set_system, get_configuration, configure_environment,
                                    restart_modulesd_function, file_monitoring):
    """Check if Vulnerability Detector behaves as expected while importing Amazon Linux JSON feed with extra tags."""
    field = test_values[0]

    if type(field) in [str]:
        if alas_feed_files[get_configuration['metadata']['os']] == custom_alas_json_feed_path:
            vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS_LOG,
                                                expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
        elif alas_feed_files[get_configuration['metadata']['os']] == custom_alas2_json_feed_path:
            vd.check_feed_imported_successfully(wazuh_log_monitor=log_monitor, log_system_name=vd.ALAS2_LOG,
                                                expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=log_monitor, parser_error=True)

    vd.check_if_modulesd_is_running()
