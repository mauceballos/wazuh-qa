'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Red Hat
       Database.

tier: 2

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/offline-update.html
    - https://documentation.wazuh.com/current/user-manual/capabilities/syscollector.html

tags:
    - vulnerability
    - vulnerability_detector
    - redhat
    - redhat_feeds
'''
import os
import shutil
from tempfile import gettempdir

import pytest
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import insert_xml_tag

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)
temporal_redhat_oval_feed_path = os.path.join(gettempdir(), 'custom_redhat_oval_feed.xml')
temporal_redhat_json_feed_path = os.path.join(gettempdir(), 'custom_json_redhat_feed.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': temporal_redhat_json_feed_path,
               'REDHAT_CUSTOM_OVAL_FEED': temporal_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Insert extra tags before <generator> tag
insert_pattern = r'(.*)(<generator>)(.*)'

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def copy_files():
    """Copy feed files into a temporal directory."""
    shutil.copy(custom_redhat_oval_feed_path, temporal_redhat_oval_feed_path)
    shutil.copy(custom_redhat_json_feed_path, temporal_redhat_json_feed_path)

    yield

    os.remove(temporal_redhat_oval_feed_path)
    os.remove(temporal_redhat_json_feed_path)


@pytest.fixture
def modify_feed(test_values, request):
    """Modify the redhat OVAL feed, setting a test field value."""
    backup_data = file.read_xml_file(file_path=custom_redhat_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    modified_data = insert_xml_tag(pattern=insert_pattern, tag=test_values[0], value=test_values[1],
                                   data=str(backup_data))

    file.write_file(file_path=temporal_redhat_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


@pytest.mark.skip(reason='Temporarily disabled until refactor in https://github.com/wazuh/wazuh-qa/issues/2453')
def test_no_feed_changes(copy_files, clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    '''
    description: Check if the feed is imported successfully by default. To do this, a vulnerability event is expected
                 and check if the number of vulnerabilities inserted in the VULNERABILITIES table of CVE DB is the
                 expected.

    wazuh_min_version: 4.2.0

    parameters:
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.

    assertions:
        - Verify that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB.

    input_description:
        - Test cases are defined in the custom_redhat_json_feed.json and custom_redhat_oval_feed.xml files. Those files
          contain different kinds of vulnerabilities. This test gets their configuration of the
          wazuh_invalid_redhat_feed.yaml file.

    expected_output:
        - r'INFO: .* The update of the .* feed finished successfully.'

    tags:
        - vulnerability
        - vulnerability_detector
        - system_inventory
    '''
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                        log_system_name='Red Hat Enterprise Linux 8',
                                        expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.skip(reason='Temporarily disabled until refactor in https://github.com/wazuh/wazuh-qa/issues/2453')
@pytest.mark.parametrize('test_values', vd.EXTRA_TEST_VALUES, ids=vd.EXTRA_TEST_IDS)
def test_extra_fields_redhat_feed(copy_files, clean_vuln_tables, test_values, get_configuration, configure_environment,
                                  modify_feed):
    '''
    description: Check if vulnerability detector behaves as expected when importing the Red Hat OVAL feed with extra
                 tags. To do this, a vulnerability event is launched and check if the number of vulnerabilities inserted
                 in the VULNERABILITIES table of CVE DB is the expected and finally check if the process is still
                 running.

    wazuh_min_version: 4.2.0

    parameters:
        - copy_files:
            type: fixture
            brief: Write dict data to JSON file.
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - test_values:
            type: tuple's list
            brief: List of tests to be performed.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - modify_feed:
            type: fixture
            brief: Modify the Amazon Linux JSON feed by setting a test tag value.

    assertions:
        - Verify that the number of vulnerabilities is equal to the expected number of vulnerabilities inserted in the
          VULNERABILITIES table of CVE DB and if the process is running.

    input_description:
        - Test cases are defined in the custom_redhat_json_feed.json and custom_redhat_oval_feed.xml files. Those files
          contain two different kinds of vulnerability. Also, there is a test_values list where each item of the list
          contains a tag and a value. Based on the tag the feed is checked to be imported successful or not. This test
          gets their configuration of the wazuh_invalid_redhat_feed.yaml file.

    expected_output:
        - r'INFO: .* The update of the .* feed finished successfully.'
        - r'ERROR: The .* feed couldn't be parsed from .* file'
        - r'ERROR: CVE database could not be updated.'

    tags:
        - vulnerability
        - vulnerability_detector
        - system_inventory
    '''
    inserted_tag = test_values[0]

    if inserted_tag != ' ' and type(inserted_tag) in [str, int]:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                            log_system_name='Red Hat Enterprise Linux 8',
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES,
                                            timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                            check_vuln_number=False)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor,
                                             timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT)

    vd.check_if_modulesd_is_running()
