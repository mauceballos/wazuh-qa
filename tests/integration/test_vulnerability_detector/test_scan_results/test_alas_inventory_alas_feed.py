'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
custom_alas_json_path = os.path.join(test_data_path, 'feeds', 'custom_alas_feed.json')
custom_alas2_json_path = os.path.join(test_data_path, 'feeds', 'custom_alas2_feed.json')
alas_vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', 'alas_vulnerabilities.json')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_alas_inventory.yaml')

# Set configuration
parameters = [
    {'ALAS_CUSTOM_FEED': custom_alas_json_path, 'ALAS2_CUSTOM_FEED': custom_alas2_json_path,
     'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)}]

# read vulnerabilities
vulnerabilities = file.read_json(alas_vulnerabilities_data_path)

ids = [vulnerability['name'] for vulnerability in vulnerabilities]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)
local_internal_options = {'wazuh_modules.debug': '2'}


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=['alas_feed'])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=vulnerabilities, ids=ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    os_name = request.param['os_name']
    os_version = request.param['os_version']
    os_major = request.param['os_major']
    os_minor = request.param['os_minor']

    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=os_name, os_version=os_version, os_major=os_major,
                     os_minor=os_minor, name=vd.MOCKED_AGENT_NAME)

    # Add custom vulnerabilities and feeds
    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'],
                          vendor=f"{vd.VENDOR[request.param['target']]}")


def test_amazon_linux_vulnerabilities_report(configure_local_internal_options_module, get_configuration,
                                             configure_environment, restart_modulesd, check_cve_db,
                                             mock_vulnerability_scan, file_monitoring):
    '''
    description: Check if inserted vulnerable packages are reported by vulnerability detector. To do this, it checks a
                 report of the corresponding vulnerabilities are generated in the logs file.

    wazuh_min_version: 4.3.0

    parameters:
        - configure_local_internal_options_module:
            type: fixture
            brief: Configure the local internal options file.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.
        - check_cve_db:
            type: fixture
            brief: Check if the CVE database exists and its tables are created.
        - mock_vulnerability_scan:
            type: fixture
            brief: It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host
                   system.

    assertions:
        - Verify that the number of OVAL vulnerabilities is the expected.
        - Verify the vulnerabilities of inserted packages.
        - Verify that the modulesd daemon is running.

    input_description:
        - Test cases are found in the test module. The `wazuh_alas_inventory.yaml` file provides the configuration of
          this module for this test. Feeds are got from custom_alas_feed.json, and custom_alas2_feed.json files.
          Vulnerabilities are got from alas_vulnerabilities.json file.

    expected_output:
        - r'The .* found a total of .* potential vulnerabilities for agent .*'
        - r'The .* package .* from agent .* is vulnerable to .*'
    '''
    vulnerabilities_number = 0
    for item in mock_vulnerability_scan['vulnerabilities']:
        vulnerabilities_number += len(item['cve']['cveid'])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted
    for item in mock_vulnerability_scan['vulnerabilities']:
        for cve_id in item['cve']['cveid']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor=log_monitor,
                                              package=item['package']['name'],
                                              cve=cve_id)
    vd.check_if_modulesd_is_running()
