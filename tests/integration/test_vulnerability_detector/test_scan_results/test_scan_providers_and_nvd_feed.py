'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
from datetime import timedelta

import pytest
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_provider_and_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.VULNERABILITIES)
custom_nvd_vulnerabilities_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

SCAN_TIMEOUT = 40

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)}]
ids = ['scan_nvd_configuration']

# Read JSON data template
vulnerabilities = file.read_json_file(vulnerabilities_data_path)
custom_nvd_vulnerabilities = file.read_json_file(custom_nvd_vulnerabilities_data_path)

systems = ['ALAS', 'ALAS2', 'RHEL8', 'RHEL7', 'RHEL6', 'RHEL5',
           'BIONIC', 'XENIAL', 'TRUSTY', 'BUSTER', 'STRETCH', 'ARCH']
system_data = [vd.SYSTEM_DATA[system] for system in systems]
system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)

def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    vd.insert_osinfo(agent=mock_agent, scan_id=0, hostname=vd.MOCKED_AGENT_NAME, os_name=request.param['os_name'],
                     os_major=request.param['os_major'], os_minor=request.param['os_minor'])

    # Insert half vulnerabilities for provider feed
    for vulnerability in vulnerabilities['vulnerabilities_provider']:
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])

    # Insert vulnerable packages
    for vulnerability in vulnerabilities['vulnerabilities_nvd']:
        vd.insert_package(name=vulnerability['package']['name'], version=vulnerability['package']['version'],
                          architecture=vulnerability['package']['architecture'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent)

    for vulnerability in vulnerabilities['vulnerabilities_provider']:
        vd.insert_package(name=vulnerability['package']['name'], version=vulnerability['package']['version'],
                          architecture=vulnerability['package']['architecture'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent,
                          vendor=vd.VENDOR[request.param['target']])

    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    # Clean the vulnerabilities inventory from the agent database
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    # Forcing a full-scan
    vd.update_last_full_scan(1, mock_agent)


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan, mock_agent):
    '''
    description: Check if inserted vulnerable packages are reported by the vulnerability detector. To do this, it
                 inserts a dummy vulnerability in the vulnerabilities table, simulating having imported a feed from a
                 provider, it inserts a simulated NVD vulnerable packages and provider simulated vulnerable packages,
                 it imports simulated NVD vulnerabilities from a custom NVD feed, and finally, it checks a
                 report of the corresponding vulnerabilities are generated in the logs file.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.
        - check_cve_db:
            type: fixture
            brief: Check if the CVE database exists and its tables are created.
        - mock_vulnerability_scan:
            type: fixture
            brief: It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host
                   system.

    assertions:
        - Verify the vulnerabilities of inserted packages.
        - Verify that the number of provider vulnerabilities is the expected.
        - Verify that the number of NVD vulnerabilities is the expected.
        - Verify that the modulesd daemon is running.

    input_description:
        - Test cases are found in the test module. The `wazuh_provider_and_nvd_configuration.yaml` file provides the
          configuration of this module for this test. Feeds are got from custom_nvd_feed.json file.
          Vulnerabilities are got from vulnerabilities.json file.

    expected_output:
        - r'The .* package .* from agent .* is vulnerable to .*'
        - r'A total of .* vulnerabilities have been reported for agent .* thanks to the `vendor` feed.'
        - r'A total of .* vulnerabilities have been reported for agent .* thanks to the `NVD` feed.'
    '''
    provider_vulnerabilities_number = len(vulnerabilities['vulnerabilities_provider'])
    nvd_vulnerabilities_number = len(vulnerabilities['vulnerabilities_nvd'])

    # Check the vulnerabilities of packages inserted
    try:
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                            package=item['package']['name'],
                                            cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                              package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                            cve_id=item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='inserted',
                                                  severity=severity,
                                                  cvss2=cvss2_score,
                                                  cvss3=cvss3_score)
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                            cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                              package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                            cve_id=item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='inserted',
                                                  severity=severity,
                                                  cvss2=cvss2_score,
                                                  cvss3=cvss3_score)

    if mock_vulnerability_scan["format"] != "rpm":
        try:
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                                package=item['package']['name'],
                                                cve=item['cve']['cveid'])
                vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                                  package=item['package']['name'],
                                                  cve=item['cve']['cveid'])
                severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                                cve_id=item['cve']['cveid'])
                vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                      package=item['package']['name'],
                                                      version=item['package']['version'],
                                                      arch=item['package']['architecture'],
                                                      cve=item['cve']['cveid'],
                                                      condition='inserted',
                                                      severity=severity,
                                                      cvss2=cvss2_score,
                                                      cvss3=cvss3_score)
        except TimeoutError:
            check_time_travel(time_travel=True, interval=timedelta(seconds=300))
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                                package=item['package']['name'],
                                                cve=item['cve']['cveid'])
                vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                                  package=item['package']['name'],
                                                  cve=item['cve']['cveid'])
                severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                                cve_id=item['cve']['cveid'])
                vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                      package=item['package']['name'],
                                                      version=item['package']['version'],
                                                      arch=item['package']['architecture'],
                                                      cve=item['cve']['cveid'],
                                                      condition='inserted',
                                                      severity=severity,
                                                      cvss2=cvss2_score,
                                                      cvss3=cvss3_score)

    # Check that the number of provider vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            f"A total of '{provider_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'vendor' feed."
        ),
        error_message=f"The expected number of vulnerabilities for vendor have not been found",
    )

    # Check that the number of NVD vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            f"A total of '{nvd_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'NVD' feed."
        ),
        error_message=f"The expected number of vulnerabilities for NVD have not been found",
    )

    # Remove the vulnerable packages
    for item in vulnerabilities['vulnerabilities_provider']:
        vd.delete_package(item['package']['name'], mock_agent)
    for item in vulnerabilities['vulnerabilities_nvd']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of deleted packages
    try:
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                      item['package']['name'],
                                                      item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='removed')
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                      item['package']['name'],
                                                      item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='removed')

    if mock_vulnerability_scan["format"] != "rpm":
        try:
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
                vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                          item['package']['name'],
                                                          item['cve']['cveid'])
                vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                      package=item['package']['name'],
                                                      version=item['package']['version'],
                                                      arch=item['package']['architecture'],
                                                      cve=item['cve']['cveid'],
                                                      condition='removed')
        except TimeoutError:
            check_time_travel(time_travel=True, interval=timedelta(seconds=300))
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
                vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                          item['package']['name'],
                                                          item['cve']['cveid'])
                vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                      package=item['package']['name'],
                                                      version=item['package']['version'],
                                                      arch=item['package']['architecture'],
                                                      cve=item['cve']['cveid'],
                                                      condition='removed')

    vd.check_if_modulesd_is_running()
