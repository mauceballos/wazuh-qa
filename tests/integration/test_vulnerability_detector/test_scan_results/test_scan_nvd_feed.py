'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
from datetime import timedelta
from shutil import copy

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.VULNERABILITIES)
custom_cpe_helper_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CPE_HELPER)
custom_msu_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_MSU)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

copy(custom_cpe_helper_data_path, vd.CPE_HELPER_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED),
               'MSU_JSON_PATH': custom_msu_data_path}]
ids = ['scan_nvd_configuration']

# Read JSON data template
nvd_vulnerabilities = file.read_json_file(vulnerabilities_data_path)

systems = ['WINDOWS10', 'MAC0', 'MAC', 'MACS', 'ARCH', 'ALAS', 'ALAS2', 'RHEL8', 'RHEL7', 'RHEL6', 'RHEL5',
           'BIONIC', 'XENIAL', 'TRUSTY', 'BUSTER', 'STRETCH']
system_data = []

for system in systems:
    if system == 'MAC0':
        system_data.append(vd.SYSTEM_DATA['MAC'])
        system_data[-1].update({"version": 'Wazuh v4.0'})
    else:
        system_data.append(vd.SYSTEM_DATA[system])
        system_data[-1].update({"version": 'Wazuh v4.1'})

system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """
    Get configurations from the module.
    """
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME,
                     os_platform=request.param['os_platform'], version=request.param['version'])

    # Insert a vulnerability in table VULNERABILITIES
    vd.insert_vulnerability(cveid='CWE-000', operation='less than', operation_value='1.0.0',
                            package='test', target=request.param['target'])

    # Add custom vulnerabilities and feeds
    for vulnerability in nvd_vulnerabilities['vulnerabilities_nvd']:
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent)


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan):
    '''
    description: Check if inserted vulnerable packages are reported by the vulnerability detector. To do this, it
                 inserts a dummy vulnerability in the vulnerabilities table, it inserts a simulated NVD vulnerable
                 packages, it imports simulated NVD vulnerabilities from a custom NVD feed, and finally, it checks a
                 report of the corresponding vulnerabilities are generated in the logs file.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.
        - check_cve_db:
            type: fixture
            brief: Check if the CVE database exists and its tables are created.
        - mock_vulnerability_scan:
            type: fixture
            brief: It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host
                   system.

    assertions:
        - Verify that the number of NVD vulnerabilities is the expected.
        - Verify the vulnerabilities of inserted packages.
        - Verify that the modulesd daemon is running.

    input_description:
        - Test cases are found in the test module. The `wazuh_nvd_configuration.yaml` file provides the configuration
          of this module for this test. Feeds are got from custom_msu.json and custom_cpe_helper.json files.
          Vulnerabilities are got from vulnerabilities.json file.

    expected_output:
        - r'Agent .* has an unsupported Wazuh version .*'
        - r'The .* found a total of .* potential vulnerabilities for agent .*'
        - r'The .* package .* from agent .* is vulnerable to .*'
        - r'.*Sending FIM event: (.+)$'
    '''
    vulnerabilities_number = len(nvd_vulnerabilities['vulnerabilities_nvd'])

    if mock_vulnerability_scan['format'] == 'pkg' and mock_vulnerability_scan['version'] == 'Wazuh v4.0':
        version = mock_vulnerability_scan['version']
        wazuh_log_monitor.start(
            timeout=SCAN_TIMEOUT,
            update_position=False,
            callback=vd.make_vuln_callback(fr"Agent .* has an unsupported Wazuh version: '{version}'"),
            error_message="The expected event 'Agent .* has an unsupported Wazuh version' not found"
        )

        return

    # Check the vulnerabilities of inserted packages
    try:
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])

    # Check that the number of NVD vulnerabilities is the expected
    if mock_vulnerability_scan["format"] != "win":
        vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                                 expected_vulnerabilities_number=vulnerabilities_number,
                                                 feed_source='NVD', timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT)

    vd.check_if_modulesd_is_running()
