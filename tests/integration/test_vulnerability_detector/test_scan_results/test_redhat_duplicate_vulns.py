'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_redhat_duplicate_vulns.yaml')
test_data_json = os.path.join(current_test_path, '..', 'data')
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', "custom_redhat_oval_feed.xml")
custom_redhat_json_feed_path = os.path.join(test_data_json, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Red Hat configurations
redhat_configurations = [{'REDHAT_CUSTOM_JSON_FEED': custom_redhat_json_feed_path + '$', 'OS': version,
                          'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path}
                         for version in range(6, 9)]
redhat_metadata = [{'feed': f'RHEL{version}'} for version in range(6, 9)]
redhat_ids = [f"RedHat_{version}_feed" for version in range(6, 9)]

# Global configuration
parameters = redhat_configurations
metadata = redhat_metadata
ids = redhat_ids

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_redhat_duplicate_vulns(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    '''
    description: Check that the vulnerabilities are not repeated in the database when it is updated. To do this, it
                 modifies the feed timestamp metadata to download again the feed and update the database.

    wazuh_min_version: 4.2.0

    parameters:
        - clean_vuln_tables:
            type: fixture
            brief: Clean vulnerabilities tables.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: fixture
            brief: Reset the logs file and start a new monitor.

    assertions:
        - Verify that the number of vulnerabilities inserted in the VULNERABILITIES table of CVE DB is not duplicated.

    input_description:
        - Test cases are found in the test module. The `wazuh_redhat_duplicate_vulns.yaml` file provides the
          configuration of this module for this test. Vulnerabilities are got from custom_redhat_oval_feed.xml file.

    expected_output:
        - r'Starting preparse step of feed .*'
        - 'The update of the `JSON Red Hat Enterprise Linux` feed finished successfully.'
    '''
    feed = get_configuration['metadata']['feed']
    timestamp = '2020-10-31T20:46:48'

    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"Starting preparse step of feed '{feed}'",
                       update_position=True)

    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event="The update of the 'JSON Red Hat Enterprise Linux' feed finished successfully.",
                       update_position=True)

    number_vulns_first = vd.get_num_vulnerabilities()

    # Modify feed metadata to download again the feed and update the database
    vd.modify_metadata_vuldet_feed(feed, timestamp)

    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"Starting preparse step of feed '{feed}'",
                       update_position=False)

    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event="The update of the 'JSON Red Hat Enterprise Linux' feed finished successfully.",
                       update_position=False)

    number_vulns_second = vd.get_num_vulnerabilities()

    assert number_vulns_first == number_vulns_second

    vd.clean_vuln_and_sys_programs_tables()
