import json
import functools
from sqlite3 import OperationalError

from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.db_interface import agent_db
from wazuh_testing.db_interface import cve_db


def clean_vd_tables(agent_id='000'):
    """Clean the tables involved with vulnerability detector packages and feeds

    Args:
        agent_id (str): id of the agent
    """
    # Clean tables in Wazuh-DB
    for item in vd.AGENT_SYS_TABLES:
        try:
            agent_db.clean_table(agent_id, item)
        except OperationalError:
            pass

    # Clean feeds DB
    for item in vd.FEED_TABLES:
        try:
            cve_db.clean_table(item)
        except OperationalError:
            pass

    # Clean NVD tables
    for item in vd.NVD_TABLES:
        try:
            cve_db.clean_table(item)
        except OperationalError:
            pass


def clean_vuln_and_sys_programs_tables(agent_id='000'):
    """Clean vulnerability detector and sys programs table/s

    Args:
        agent_id (str): Agent ID.
    """
    clean_vd_tables(agent_id)


def insert_data_json_feed(data, field_name, field_value, append_data, brackets=True):
    """Allow insert key:value pair as string, since otherwise, you could not insert lists or dictionaries as a key.

    Args:
        data (dict): data dictionary
        field_name (str): field name to insert
        field_value (str): field value to insert
        append_data (dict): additional data to insert
        brackets (bool): insert data between brackets

    Returns:
        str: JSON string
    """
    if type(field_name) is str:
        data[field_name] = field_value
        raw_data = json.dumps(data, indent=4, ensure_ascii=False)
    else:
        data['replace_me'] = field_value  # This is necessary to make a non-string field
        raw_data = json.dumps(data, indent=4, ensure_ascii=False).replace('"replace_me"', f"{field_name}")

    if append_data:
        response = f"\n{raw_data},\n{json.dumps(append_data, indent=4, ensure_ascii=False)}\n"
        return f"[{response}]" if brackets else response
    else:
        return f"[\n{raw_data}]" if brackets else f"\n{raw_data}"


def calculate_severity_from_score(base_score, cvss):
    """Get the severity according to a CVSS2 or CVSS3 score.

    Args:
        base_score (float): The base score to get its severity.
        cvss (str): A string to indicate the CVSS scale to use ('cvss2/cvss3').

    Returns:
        str: Severity.
    """
    severity = '-'

    if cvss == 'cvss2':
        if base_score >= 7:
            severity = 'High'
        elif base_score >= 4:
            severity = 'Medium'
        else:
            severity = 'Low'
    elif cvss == 'cvss3':
        if base_score >= 9:
            severity = 'Critical'
        elif base_score >= 7:
            severity = 'High'
        elif base_score >= 4:
            severity = 'Medium'
        elif base_score >= 0.1:
            severity = 'Low'
        else:
            severity = '-'

    return severity


def find_cve_severity_score(cve_array, cve_id):
    """Get the CVE severity and score.

    Args:
        cve_array (str): The CVE's data read from the NVD feed.
        cve_id (str): The CVE ID to find and return its severity and score.

    Returns:
        (str, float, float): Severity and score.
    """
    severity = '-'
    cvss2_score = 0
    cvss3_score = 0

    for cve in cve_array:
        if cve['cve']['CVE_data_meta']['ID'] == cve_id:
            # The CVSS3 has priority over CVSS2
            if 'baseMetricV2' in cve['impact']:
                cvss2_score = cve['impact']['baseMetricV2']['cvssV2']['baseScore']
                severity = calculate_severity_from_score(cvss2_score, 'cvss2')

            if 'baseMetricV3' in cve['impact']:
                cvss3_score = cve['impact']['baseMetricV3']['cvssV3']['baseScore']
                severity = calculate_severity_from_score(cvss3_score, 'cvss3')
            break

    return severity, cvss2_score, cvss3_score


def find_rhel_cve_severity_score(cve_nvd_array, cve_rhel_array, cve_id):
    """Get the cve severity score correlating it with the RHEL feed.

    It looks for the cve_id in cve_nvd_array and temporarily stores its
    severity and score. Then, if found, the values are overridden by the ones
    in the RHEL feed, otherwise it will keep the previous ones.

    Args:
        cve_nvd_array (str): The CVE's data read from the NVD feed.
        cve_rhel_array (str): The CVE's data read from the RHEL feed.
        cve_id (str): The CVE ID to find and return its severity and score.

    Returns:
        (str, float, float): Severity and score.
    """
    severity, cvss2_score, cvss3_score = find_cve_severity_score(cve_nvd_array, cve_id)

    for cve in cve_rhel_array:
        if cve['CVE'] == cve_id:
            # The CVSS3 has priority over CVSS2
            if 'cvss_score' in cve and cve['cvss_score'] is not None:
                cvss2_score = float(cve['cvss_score'])
                severity = calculate_severity_from_score(cvss2_score, 'cvss2')
            if 'cvss3_score' in cve and cve['cvss3_score'] is not None:
                cvss3_score = float(cve['cvss3_score'])
                severity = calculate_severity_from_score(cvss3_score, 'cvss3')

    return severity, cvss2_score, cvss3_score


def check_vulnerability_scan_inventory(agent_id, package, version, arch, cve, condition, severity='-', cvss2=0,
                                       cvss3=0):
    """Check the existence or lack of a vulnerability in the agent's DB.

    Args:
        agent_id (str): Agent ID.
        package (str): Package name.
        version (str): Package version.
        arch (str): Package architecture.
        cve (str): Vulnerability ID associated to the vulnerable package.
        condition (str): This parameter is used to check if the vulnerability exists ('inserted') or
                         not ('removed') in the inventory.
        severity (str): Vulnerability severity.
        cvss2 (str): CVSS2 score of the vulnerable package.
        cvss3 (str): CVSS3 score of the vulnerable package.

    Raises:
        Exception: If the condition has unexpected value or the result was not the expected one.
    """
    result = agent_db.check_vulnerability_scan_inventory(agent_id=agent_id, package=package, version=version, arch=arch,
                                                         cve=cve, condition=condition, severity=severity, cvss2=cvss2,
                                                         cvss3=cvss3)
    if result == 'false':
        raise Exception(f'The vulnerability {cve} has not been {condition} as expected')
