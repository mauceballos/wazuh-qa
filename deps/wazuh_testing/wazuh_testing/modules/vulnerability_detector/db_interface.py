import datetime
import os
from sqlite3 import OperationalError
from time import time, sleep

from wazuh_testing.wazuh_db import query_wdb
from wazuh_testing.tools.sqlite import make_query
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.tools import sqlite
from wazuh_testing.tools.services import control_service


def clean_table(db_path, table):
    """Deletes all entries in a table of a database.

    Args:
        db_path (str): path to the database
        table (str): table from the DB
    """
    query_string = f"DELETE FROM {table}"
    sqlite.make_query(db_path, [query_string])


def clean_table_wazuh_db(agent, table):
    """Deletes all entries in a table of a database.

    Args:
        db_path (str): path to the database
        table (str): table from the DB
    """
    query_string = f"agent {agent} sql DELETE FROM {table}"
    query_wdb(query_string)


def clean_vd_tables(agent="000"):
    """Clean the tables involved with vulnerability detector packages and feeds

    Args:
        agent (str): id of the agent
    """
    # Clean tables in Wazuh-DB
    for item in vd.AGENT_SYS_TABLES:
        try:
            clean_table_wazuh_db(agent, item)
        except OperationalError:
            pass

    # Clean feeds DB
    for item in vd.FEED_TABLES:
        try:
            clean_table(vd.CVE_DB_PATH, item)
        except OperationalError:
            pass

    # Clean NVD tables
    for item in vd.NVD_TABLES:
        try:
            clean_table(vd.CVE_DB_PATH, item)
        except OperationalError:
            pass


def update_last_full_scan(last_scan=0, agent="000"):
    """Changes the value of the last scan of an agent.

    Args:
        last_scan (int): id of the last scan. This is compute by casting to int the result of time()
        agent (str): id of the agent
    """

    query_string = f"agent {agent} sql UPDATE vuln_metadata SET LAST_FULL_SCAN={last_scan}"
    query_wdb(query_string)


def insert_hotfix(agent='000', scan_id=int(time()), scan_time=datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"),
                  hotfix='000000', checksum='dummychecksum'):
    """Changes the value of the last scan of an agent.

    Args:
        agent (str): id of the agent
        scan_id (int): id of the last scan
        scan_time (str): date of the scan with this format "%Y/%m/%d %H:%M:%S"
        hotfix (str): id representing the hotfix value
        checksum (str): checksum of the hotfix
    """
    query_string = f'''agent {agent} sql INSERT INTO sys_hotfixes
        (scan_id, scan_time, hotfix, checksum)
        VALUES
        ({scan_id}, "{scan_time}", "{hotfix}", "{checksum}")
        '''
    query_wdb(query_string)


def insert_osinfo(agent="000", scan_id=int(time()), scan_time=datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"),
                  hostname="centos8", architecture="x86_64",
                  os_name="CentOS Linux",
                  os_version="8.4", os_major="8", os_minor="4", os_build="", version="",
                  os_release="", os_patch="", release="", checksum="dummychecksum"):
    """Inserts the OS information in the agent database.

    Args:
        agent (str): id of the agent
        scan_id (int): id of the last scan
        scan_time (str): date of the scan with this format "%Y/%m/%d %H:%M:%S"
        hostname (str): name of the host
        architecture (str): architecture of the host
        os_name (str): complete name of the OS
        os_version (str): version of the OS
        os_major (str): major version of the OS
        os_minor (str): minor version of the OS
        os_build (str): build id of the OS
        version (str): version of the OS
        os_release (str): release of the OS
        os_patch (str): current patch of the OS
        release (str): release of the OS
        checksum (str): checksum of the OS
    """
    query_string = f'''agent {agent} sql INSERT OR REPLACE INTO sys_osinfo
        (scan_id, scan_time, hostname, architecture, os_name, os_version, os_major, os_minor, os_patch, os_build,
        release, version, os_release, checksum)
        VALUES
        ("{scan_id}", "{scan_time}", "{hostname}", "{architecture}", "{os_name}", "{os_version}", "{os_major}",
        "{os_minor}", "{os_patch}", "{os_build}", "{release}", "{version}", "{os_release}", "{checksum}")
        '''

    query_wdb(query_string)


def insert_package(agent='000', scan_id=int(time()), format='rpm', name=vd.DEFAULT_PACKAGE_NAME,
                   priority='', section='Unspecified', size=99, vendor='wazuhintegrationtests', version='1.0.0-1.el7',
                   architecture='x86_64', multiarch='', description='Wazuh Integration tests mock package',
                   source='Wazuh Integration tests mock package', location='', triaged=0,
                   install_time=datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"),
                   scan_time=datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"), checksum="dummychecksum",
                   item_id="dummyitemid"):
    """Insert a new package in the installed package database, with the parameters given as arguments.

    If used in conjunction with ``insert_vulnerability`` using the default arguments it will generate an alert.

    Args:
        agent (str): id of the agent
        scan_id (int): id of the last scan
        format (str): format of the package. It may be rpm, deb, etc
        name (str): name of the package. Defaults to wazuhintegrationpackage
        priority (str): priority of the released package
        section (str): section of the package
        size (int): size of the package
        vendor (str): vendor of the package. Defaults to wazuhintegrationtests
        version (str): version of the package.
        architecture (str): architecture of the package
        multiarch (str): defines if a package may be installed in different architectures.
        description (str): description of the package
        source (str): source of the package
        location (str): location of the package
        triaged (int): times installed
        install_time (str): timestamp containing the installation time
        scan_time (str): timestamp of the scan
        checksum (str): checksum of the package
        item_id (str): id of the package
    """
    arguments = locals()
    for key, value in arguments.items():
        if type(value) is str:
            if value != 'NULL':
                arguments[key] = f"'{value}'"

    query_wdb(f"agent {agent} sql INSERT INTO sys_programs (scan_id, scan_time, format, name, priority, section, size,"
              f"vendor, install_time, version, architecture, multiarch, source, description, location, triaged,"
              f"checksum, item_id) VALUES ({arguments['scan_id']}, {arguments['scan_time']}, {arguments['format']},"
              f"{arguments['name']}, {arguments['priority']}, {arguments['section']}, {arguments['size']},"
              f"{arguments['vendor']}, {arguments['install_time']}, {arguments['version']},"
              f"{arguments['architecture']}, {arguments['multiarch']}, {arguments['source']}, "
              f"{arguments['description']}, {arguments['location']}, {arguments['triaged']}, {arguments['checksum']},"
              f"{arguments['item_id']})")


def insert_vulnerability(cveid=vd.DEFAULT_VULNERABILITY_ID, target='RHEL7', target_minor='',
                         package=vd.DEFAULT_PACKAGE_NAME, operation='less than', operation_value='2.0.0-1.el7',
                         title='', severity='critical',
                         published=datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                         updated='', reference='https://github.com/wazuh/wazuh-qa', target_v='REDHAT', cvss='10.000000',
                         cvss_vector="AV:N/AC:L/Au:N/C:C/I:C/A:C", rationale='Wazuh integration test vulnerability',
                         cvss3='', bugzilla_reference='https://github.com/wazuh/wazuh-qa', cwe='WVE-000 -> WVE-001',
                         advisory='RHSA-2010:0029', ref_target='RHEL'):
    """Insert a new vulnerability in the database of vulnerabilities, with the parameters given as arguments.

    If used in conjunction with ``insert_package_in_db`` using the default arguments it will generate an alert.

    Args:
        cveid (str): id of the vulnerability
        target (str): id of the target OS. Defaults to RHEL7
        target_minor (str): minor version of the target OS
        package (str): name of the package. Defaults to wazuhintegrationpackage
        operation (str): operation to compare the version of the packages
        operation_value (str): value used to compare the packages
        title (str): title of the vulnerability
        severity (str): severity of the vulnerability
        published (str): date when the vulnerability was published
        updated (str): string containing if the package was updated
        reference (str): URL referencing the vulnerability
        target_v (str): target of the family OS. Defaults to REDHAT
        cvss (str): common vulnerability scoring system
        cvss_vector (str): a compressed textual representation of the values used to derive the score
        rationale (str): set of reasons to descrive de vulnerability
        cvss3 (str): common vulnerability scoring system version 3
        bugzilla_reference (str): URL referencing to bugzilla
        cwe (str): CWE id
        advisory (str): advisory ID
        ref_target (str): id of the target OS. Defaults to RHEL
    """

    vulnerabilities_query_string = f'''INSERT INTO VULNERABILITIES
        (cveid, target, target_minor, package, operation, operation_value)
        VALUES
        ("{cveid}", "{target}", "{target_minor}", "{package}", "{operation}",
        "{operation_value}")'''
    query_vulnerabilities_info_query_string = f'''INSERT INTO VULNERABILITIES_INFO
        (ID, title, severity, published, updated, target, rationale, cvss, cvss_vector, CVSS3, cwe)
        VALUES
        ("{cveid}", "{title}", "{severity}", "{published}", "{updated}", "{target_v}",
        "{rationale}", "{cvss}", "{cvss_vector}", "{cvss3}", "{cwe}")
        '''
    query_references_info = f'''INSERT INTO REFERENCES_INFO
        (id, target, reference)
        VALUES
        ("{cveid}", "{ref_target}", "{reference}")
        '''
    query_bugzilla_info = f'''INSERT INTO BUGZILLA_REFERENCES_INFO
        (id, target, bugzilla_reference)
        VALUES
        ("{cveid}", "{ref_target}", "{bugzilla_reference}")
        '''
    query_advisories_info = f'''INSERT INTO ADVISORIES_INFO
        (id, target, advisory)
        VALUES
        ("{cveid}", "{ref_target}", "{advisory}")
        '''

    sqlite.make_query(vd.CVE_DB_PATH, [vulnerabilities_query_string, query_vulnerabilities_info_query_string,
                             query_references_info, query_bugzilla_info, query_advisories_info])


def update_sync_info(agent="000", component="syscollector-packages", last_attempt=1, last_completion=1,
                     n_attempts=0, n_completions=0, last_agent_checksum=''):
    """Update the sync_info table of the specified agent for the selected component."""
    query_wdb(f"agent {agent} sql UPDATE sync_info SET last_attempt = {last_attempt},"
              f"last_completion = {last_completion}, n_attempts = {n_attempts}, n_completions = {n_completions},"
              f"last_agent_checksum = '{last_agent_checksum}' where component = '{component}'")


def update_package(version, package, agent="000"):
    """Update version of installed package in database.

    Used to simulate upgrades and downgrades of the package given as argument.

    Args:
        version (str): version of the package
        package (str): package name
        agent (str): id of the agent
    """
    update_query_string = f'agent {agent} sql UPDATE sys_programs SET version="{version}" WHERE name="{package}"'
    query_wdb(update_query_string)


def delete_package(package, agent='000'):
    """Remove package from database.

    Used to simulate uninstall of the package given as argument or remove a package after a test.

    Args:
        package (str): package name
        agent (str): id of the agent
    """
    delete_query_string = f'agent {agent} sql DELETE FROM sys_programs WHERE name="{package}"'
    query_wdb(delete_query_string)


def delete_vulnerability(cveid):
    """Update version of installed package in database.

    Used to simulate uninstall of the package given as argument or remove a package after a test.

    Args:
        cveid (str): id of the vulnerability
    """
    delete_vulnerabilities_query_string = f"DELETE FROM VULNERABILITIES WHERE cveid='{cveid}'"
    delete_vulnerabilities_info_query_string = f"DELETE FROM VULNERABILITIES_INFO WHERE id='{cveid}'"
    delete_references_info_query_string = f"DELETE FROM REFERENCES_INFO WHERE id='{cveid}'"
    delete_bugzilla_info_query_string = f"DELETE FROM BUGZILLA_REFERENCES_INFO WHERE id='{cveid}'"
    delete_advisories_info_query_string = f"DELETE FROM ADVISORIES_INFO WHERE id='{cveid}'"
    sqlite.make_query(vd.CVE_DB_PATH, [delete_vulnerabilities_query_string, delete_vulnerabilities_info_query_string,
                             delete_references_info_query_string, delete_bugzilla_info_query_string,
                             delete_advisories_info_query_string])


def clean_vulnerabilities_inventory(agent="000"):
    """Clean the vulnerabilities inventory from database.

    Args:
        agent (str): id of the agent
    """
    clean_query_string = f"agent {agent} sql DELETE from vuln_cves"
    query_wdb(clean_query_string)


def modify_system(os_name='CentOS Linux', os_major='7', name='centos7', agent_id='000', os_minor='1', os_arch='x86_64',
                  os_version='7.1', os_platform='centos', version='4.0'):
    """Modify the system of the manager.

    Used to select the feed that will be used to search vulnerabilities.

    Args:
        os_name (str): complete name of the OS
        os_major (str): major version of the OS
        name (str): name of the OS
        agent_id (int): id of the agent
        os_minor (str): minor version of the OS
        os_arch (str): architecture of the host
        os_version (str): version of the OS
        os_platform (str): platform of the os (centos, ubuntu)
        version (str): version of the OS
    """

    query_string = f"global sql update AGENT set OS_NAME='{os_name}', OS_VERSION='{os_version}', OS_MAJOR='{os_major}', "\
                   f"OS_MINOR='{os_minor}', OS_ARCH='{os_arch}', NAME='{name}', OS_PLATFORM='{os_platform}', "\
                   f"VERSION='{version}' WHERE id='{int(agent_id)}'"
    query_wdb(query_string)


def get_num_vulnerabilities():
    """Get the number of vulnerabilities inserted in VULNERABILITIES table of CVE DB.

    Returns:
        int: total number of vulnerabilities in the VULNERABILITIES table
    """
    query_string = f'SELECT count(*) from VULNERABILITIES'
    query_result = sqlite.get_query_result(vd.CVE_DB_PATH, query_string)
    vulnerabilities_number = int(query_result[0])

    return vulnerabilities_number


def clean_vuln_and_sys_programs_tables(agent='000'):
    """Clean vulnerability detector and sys programs table/s

    Args:
        agent (str): id of the agent
    """
    clean_vd_tables(agent)


def insert_custom_package(**kwargs):
    """Insert a custom package in sys_programs table

    Args:
        kwargs (dict): Required arguments of the ``insert_package`` function (see its argument list)
    """
    insert_package(**kwargs)


def set_custom_system(**kwargs):
    """It allows to modify the agent system, modifying the corresponding entry in the agent table of the global.d

    Args:
        kwargs (dict): Required arguments of the ``modify_system`` function (see its argument list)
    """
    modify_system(**kwargs)


def set_system(system):
    """Set custom system in global DB Agent info

    Args
        system (str): system to set. Available systems in SYSTEM_DATA variable
    """
    try:
        set_custom_system(os_name=vd.SYSTEM_DATA[system]['os_name'], os_major=vd.SYSTEM_DATA[system]['os_major'],
                          os_minor=vd.SYSTEM_DATA[system]['os_minor'], name=vd.SYSTEM_DATA[system]['name'])
    except KeyError:
        pass

def modify_metadata_vuldet_feed(feed, timestamp):
    """Function to modify the timestamp value of the metadata table for a specific feed.

    Args:
        feed (str): The feed name.
        timestamp (str): The new timestamp value to set.
    """
    query_string = f"update METADATA set TIMESTAMP='{timestamp}' where TARGET='{feed}'"
    sqlite.make_query(vd.CVE_DB_PATH, [query_string])
    sleep(1)


def modify_nvd_metadata_vuldet(timestamp):
    """Function to modify the timestamp value of the nvd_metadata table.

    Args:
        timestamp (int): The new timestamp value to set.

    Raises:
        sqlite3.OperationalError: If the modification has not been possible.
    """
    query_string = f"UPDATE NVD_METADATA SET LAST_UPDATE={timestamp};"
    for _ in range(vd.VULN_DETECTOR_GLOBAL_TIMEOUT):
        try:
            sqlite.make_query(vd.CVE_DB_PATH, [query_string])
            break
        except OperationalError:
            sleep(1)
    else:
        raise OperationalError


def create_mocked_agent(name="centos8-agent", ip="127.0.0.1", register_ip="127.0.0.1", internal_key="",
                        os_name="CentOS Linux", os_version="8.4", os_major="8", os_minor="4", os_codename="centos-8",
                        os_build="4.18.0-147.8.1.el8_1.x86_64", os_platform="#1 SMP Thu Apr 9 13:49:54 UTC 2020",
                        os_uname="x86_64", os_arch="x86_64", version="4.2", config_sum="", merged_sum="",
                        manager_host="centos-8", node_name="node01", date_add="1612942494",
                        last_keepalive="253402300799", group="", sync_status="synced", connection_status="active",
                        client_key_secret=None):
    """Mock a new agent creating a new client keys entry, adding it to the global db and creating a new agent id DB."""
    # Get new agent_id
    last_id = query_wdb('global sql SELECT id FROM agent order by id desc limit 1')
    agent_id = int(last_id[0]['id']) + 1

    query_create_agent = f'''global sql INSERT OR REPLACE INTO AGENT
           (id, name, ip, register_ip, internal_key, os_name, os_version, os_major, os_minor,
            os_codename, os_build, os_platform, os_uname, os_arch, version, config_sum, merged_sum,
            manager_host, node_name, date_add, last_keepalive, "group", sync_status, connection_status)
           VALUES
           ( "{agent_id}", "{name}", "{ip}", "{register_ip}", "{internal_key}", "{os_name}", "{os_version}",
             "{os_major}", "{os_minor}", "{os_codename}", "{os_build}", "{os_platform}", "{os_uname}",
             "{os_arch}", "{version}", "{config_sum}", "{merged_sum}", "{manager_host}", "{node_name}",
             "{date_add}", "{last_keepalive}", "{group}", "{sync_status}", "{connection_status}")
           '''

    agent_id_str = str(agent_id).zfill(3)  # Convert from x to 00x

    add_client_keys_entry(agent_id_str, name, ip, client_key_secret)

    # A dummy sql query creates a new DB
    query_wdb(f'''agent {agent_id} sql DELETE FROM sys_osinfo''')
    query_wdb(query_create_agent)

    # Restarting Wazuh-DB before creating new DB
    control_service('restart', daemon='wazuh-db')
    # sleep is needed since, without it, the agent database creation may fail
    sleep(3)

    return agent_id_str


def modify_agent_scan_timestamp(agent="000", timestamp=0, full_scan=True):
    """Function to modify the timestamp of the agent scans in the vuln_metadata table.

    Args:
        agent (str, optional) = Id of the agent. Defaults to "000".
        timestamp (int, optional): The new timestamp value to set. Defaults to 0.
        full_scan (bool, optional): True for set LAST_FULL_SCAN or False to set LAST_SCAN. Defaults to True.
    """
    scan_type = "LAST_FULL_SCAN" if full_scan else "LAST_PARTIAL_SCAN"
    query_wdb(f"agent {agent} sql UPDATE vuln_metadata SET {scan_type}={timestamp}")


def delete_mocked_agent(agent_id):
    """Delete a mocked agent removing it from the global db, client keys and db file."""
    # Remove from global db
    query_wdb(f"global sql DELETE FROM agent where id={int(agent_id)}")

    # Remove agent id DB file
    os.remove(os.path.join(vd.DB_PATH, f"{agent_id}.db"))

    # Remove entry from client keys
    delete_client_keys_entry(agent_id)
